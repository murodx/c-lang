1. **Освобождение мьютекса**:
   - Когда поток вызывает `pthread_cond_wait(&condvar, &mutex)`, он **освобождает мьютекс** `mutex`, который он захватил ранее. Это освобождение позволяет другим потокам, которые могут изменять условие, захватывать этот мьютекс и обновлять данные или изменять состояние, которое ожидается.

2. **Ожидание сигнала**:
   - После освобождения мьютекса поток **переходит в состояние ожидания** на условной переменной `condvar`. В этом состоянии поток остается заблокированным и не выполняется до тех пор, пока не получит сигнал.

3. **Получение сигнала и захват мьютекса**:
   - Когда другой поток вызывает `pthread_cond_signal(&condvar)`, он отправляет сигнал, который пробуждает один или несколько потоков, ожидающих на условной переменной.
   - Когда поток получает сигнал, он автоматически **попытаться захватить мьютекс** `mutex` снова. После успешного захвата мьютекса поток продолжает выполнение с того места, где он был заблокирован на `pthread_cond_wait`.

Этот процесс обеспечивает синхронизацию между потоками и предотвращает состояние гонки, обеспечивая корректное обновление разделяемых данных и последовательное выполнение кода.

